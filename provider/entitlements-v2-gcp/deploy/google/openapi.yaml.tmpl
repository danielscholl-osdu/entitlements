{{$endPointsServiceName := getenv "ENDPOINTS_SERVICE_NAME" -}}
{{$sauthIssuer := getenv "SAUTH_ISSUER" -}}
{{$sauthJwksUri := getenv "SAUTH_JWKS_URI" -}}
{{$sauthAudiences := getenv "SAUTH_AUDIENCES" -}}
{{$googleAudiences := getenv "GOOGLE_AUDIENCES" -}}
{{$domain := getenv "GOOGLE_DOMAIN" -}}
swagger: "2.0"
info:
  description: "Entitlement Service handles user management and permissions within the Data Ecosystem."
  title: "Entitlements Service V2"
  version: "2.0.0"
  contact:
    name: OSDU team
    email: dps@test.com
host: "{{$endPointsServiceName}}"
x-google-allow: all
x-google-endpoints:
- name: "{{$endPointsServiceName}}"
  allowCors: True
basePath: "/entitlements/v1"
tags:
- name: "Entitlements Groups Administration"
  description: "Group creation and Listing groups for a member."
- name: "Entitlements Members Administration"
  description: "Adding members, Getting member details and Getting members within a group"
- name: "Entitlements Auth Administration"
  description: "Validates the JWT"
consumes:
- "application/json"
produces:
- "application/json"
schemes:
  - https
paths:
  /groups:
    get:
      security:
        - Bearer: []
        - google_id_token: []
        - sauth_id_token: []
      tags:
        - "Entitlements Groups Administration"
      description: "Lists all the groups that the user belongs to in the given tenant. This API requires caller to have the service.entitlements.user permission"
      operationId: "groups"
      produces:
        - "application/json"
      parameters:
        - name: "data-partition-id"
          in: "header"
          description: "This value should be the desired data partition id."
          required: true
          type: "string"
          default: "common"
      responses:
        200:
          description: "List of groups"
          schema:
            items:
              $ref: "#/responses/GroupsListRes"
        401:
          description: "User is unauthorized."
          schema:
            "$ref": "#/definitions/AppError"
    post:
      tags:
        - "Entitlements Groups Administration"
      description: "Creates a new group with the original caller becoming the OWNER of the group being created. This API requires caller to have the service.entitlements.admin permission"
      operationId: "createGroup"
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - name: "data-partition-id"
          in: "header"
          description: "This value should be the desired data partition id."
          required: true
          type: "string"
          default: "common"
        - description: "Payload"
          name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/InsertGroupBodyReq"
      responses:
        202:
          description: "Group details"
          schema:
            $ref: "#/definitions/GroupRes"
        401:
          description: "User is unauthorized."
          schema:
            $ref: "#/definitions/AppError"
        409:
          description: "Conflict. Failed to insert group. Entity already exists."
          schema:
            $ref: "#/definitions/AppError"
        400:
          description: "Bad request."
          schema:
            $ref: "#/definitions/AppError"
      security:
        - Bearer: []
        - google_id_token: []
        - sauth_id_token: []
  /groups/{group_email}:
    delete:
      tags:
        - "Entitlements Groups Administration"
      description: "Delete a existing group. This is an internal API and only internal service account is able to call it"
      operationId: "deleteGroup"
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - name: "data-partition-id"
          in: "header"
          description: "This value should be the desired data partition id."
          required: true
          type: "string"
          default: "common"
        - name: "group_email"
          in: "path"
          description: "group email"
          required: true
          type: "string"
          default: "users.group@domain.com"
      responses:
        202:
          description: "The group is deleted."
        401:
          description: "User is unauthorized."
          schema:
            $ref: "#/definitions/AppError"
      security:
        - Bearer: []
        - google_id_token: []
        - sauth_id_token: []
    put:
      tags:
      - "Entitlements Groups Administration"
      description: "Update a user group. This is an internal API and only internal service account is able to call it"
      operationId: "updateGroup"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "data-partition-id"
        in: "header"
        description: "This value should be the desired data partition id."
        required: true
        type: "string"
        default: "common"
      - name: "groupName"
        in: "query"
        description: "new group name"
        required: true
        type: "string"
      - name: "group_email"
        in: "path"
        description: "group email"
        required: true
        type: "string"
        default: "users.group@domain.com"
      responses:
        202:
          description: "The group is updated."
        401:
          description: "User is unauthorized."
          schema:
            $ref: "#/definitions/AppError"
      security:
        - Bearer: []
        - google_id_token: []
        - sauth_id_token: []
  /groups/{group_email}/members:
    get:
      tags:
        - "Entitlements Members Administration"
      description: "This lists the direct members of a group. This API requires the service.entitlements.user permission and to be either a MEMBER/OWNER of the requested group"
      operationId: "listMembers"
      produces:
        - "application/json"
      parameters:
        - name: "data-partition-id"
          in: "header"
          description: "This value should be the desired data partition id."
          required: true
          type: "string"
          default: "common"
        - name: "group_email"
          in: "path"
          description: "group email"
          required: true
          type: "string"
          default: "users.datalake.viewers@common.{{$domain}}"
        - name: "role"
          in: "query"
          description: "role"
          required: false
          type: "string"
          enum: [OWNER, MEMBER]
          default: "OWNER"
      responses:
        200:
          description: "List of members with in a group."
          schema:
            $ref: "#/definitions/MemberList"
        401:
          description: "User is unauthorized."
          schema:
            $ref: "#/definitions/AppError"
      security:
        - Bearer: []
        - google_id_token: []
        - sauth_id_token: []
    post:
      tags:
        - "Entitlements Members Administration"
      description: "Adds a member to an existing group. This API requires the service.entitlements.user permission and to be an OWNER of the requested group."
      operationId: "createMembers"
      produces:
        - "application/json"
      parameters:
        - name: "data-partition-id"
          in: "header"
          description: "This value should be the desired data partition id."
          required: true
          type: "string"
          default: "common"
        - name: "group_email"
          in: "path"
          description: "group email"
          required: true
          type: "string"
          default: "users.datalake.viewers@common.{{$domain}}"
        - name: "member"
          in: "body"
          description: "member"
          required: true
          schema:
            $ref: "#/definitions/InsertMemberBodyReq"
      responses:
        202:
          description: "Add member into a group. It take effect immediately."
          schema:
            $ref: "#/definitions/MemberResBody"
        401:
          description: "User is unauthorized."
          schema:
            $ref: "#/definitions/AppError"
      security:
        - Bearer: []
        - google_id_token: []
        - sauth_id_token: []
  /groups/{group_email}/members/{member_email}:
    delete:
      tags:
        - "Entitlements Members Administration"
      description: "Delete member from a group. This API requires the service.entitlements.user permission and be an OWNER in the group"
      operationId: "deleteMember"
      produces:
        - "application/json"
      parameters:
        - name: "data-partition-id"
          in: "header"
          description: "This value should be the desired data partition id."
          required: true
          type: "string"
          default: "common"
        - name: "group_email"
          in: "path"
          description: "group email"
          required: true
          type: "string"
          default: "users.datalake.viewers@common.{{$domain}}"
        - name: "member_email"
          in: "path"
          description: "member email"
          required: true
          type: "string"
          default: "member@domain.com"
      responses:
        202:
          description: "Delete member from a group. It take effect immediately."
        401:
          description: "User is unauthorized."
          schema:
            $ref: "#/definitions/AppError"
      security:
        - Bearer: []
        - google_id_token: []
        - sauth_id_token: []
  /auth/validate:
    get:
      tags:
        - "Entitlements Auth Administration"
      description: "Validates the JWT."
      operationId: "auth"
      produces:
        - "application/json"
      responses:
        200:
          description: "JWT is valid."
      security:
        - Bearer: []
        - google_id_token: []
        - sauth_id_token: []
  /cache/update:
    get:
      description: "Update entitlements cache"
      responses:
        200:
          description: "Cache updated successfully"
      operationId: "updatecache"
  /members:updatecache:
    put:
      description: "Update the groups cache for the given member ids"
      parameters:
        - name: "data-partition-id"
          in: "header"
          description: "This value should be the primary data partition id."
          required: false
          type: "string"
          default: "tenant1"
        - description: "Payload"
          name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/MembersCacheUpdateReq"
      responses:
        204:
          description: "No content"
        401:
          description: "User is unauthorized."
          schema:
            "$ref": "#/definitions/AppError"
        400:
          description: "Invalid des id provided"
          schema:
            "$ref": "#/definitions/AppError"
      operationId: "updateCachedGroups"
definitions:
  AppError:
    type: "object"
    properties:
      code:
        type: "integer"
        format: int32
      name:
        type: "string"
      message:
        type: "string"
    description: "An error that occurs during normal application logic"
  InsertMemberBodyReq:
    description: "InsertMemberBodyReq is the message format of the member."
    type: "object"
    properties:
      email:
        type: "string"
        example: "member@domain.com"
      role:
        type: "string"
        enum: [OWNER, MEMBER]
        example: "OWNER"
    example:
      email: "member@domain.com"
      role: "MEMBER"
  InsertGroupBodyReq:
    description: "InsertGroupBodyReq is the message format of the group"
    type: "object"
    properties:
      name:
        type: "string"
        example: "users.example.viewers"
      description:
        type: "string"
        example: "This is an user group for example viewers."
  MembersCacheUpdateReq:
    description: "A set of member ids for which cache update is needed"
    type: "object"
    properties:
      desIds:
        type: "array"
        items:
          type: "string"
  GroupRes:
    description: "GroupRes is the group details"
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      description:
        type: "string"
    example:
      name: "users.example.viewers,"
      email: "users.datalake.viewers@common.{{$domain}},"
      description: "This is an user group for example viewers."
    x-go-package: "entitlements/group"
  GroupList:
    description: "GroupList contains a list of Groups"
    type: "object"
    properties:
      Groups:
        type: "array"
        items:
          $ref: "#/definitions/GroupRes"
    x-go-package: "entitlements/group"
  MemberResBody:
    description: "MemberResBody is the body of the MemberRes response."
    type: "object"
    properties:
      email:
        type: "string"
        description: "Email of the member."
      role:
        type: "string"
        description: "Role of the member in the group."
    x-go-package: "entitlements/member"
  MemberList:
    description: "MemberList contains a list of members."
    type: "object"
    properties:
      members:
        type: "array"
        items:
          $ref: "#/definitions/MemberResBody"
    x-go-package: "member"
  AccessToken:
    description: "AccessToken is the body of the AccessTokenRes response."
    type: "object"
    properties:
      AccessToken:
        type: "string"
        description: "Access token."
      Expiry:
        type: "string"
        description: "Token expiration time."
      TokenType:
        type: "string"
        description: "Type of token."
    x-go-package: "entitlements/member"
responses:
  Empty:
    description: "Empty is an empty message used in a response."
  GroupsListRes:
    description: "GroupsListRes is the response containing the list of groups."
    schema:
      $ref: "#/definitions/GroupList"
  UserListRes:
    description: "UserListRes is the response containing the list of members."
    schema:
      $ref: "#/definitions/MemberList"
  MemberRes:
    description: "MemberRes is the response containing member information."
    schema:
      $ref: "#/definitions/MemberResBody"
  MemberListRes:
    description: "MemberListRes is the response containing the list of members."
    schema:
      $ref: "#/definitions/MemberList"
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
  sauth_id_token:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "{{$sauthIssuer}}"
    x-google-jwks_uri: "{{$sauthJwksUri}}"
    x-google-audiences: "{{$sauthAudiences}}"
    scopes: {}
  # This section configures authentication using SAuth Tokens.
  # ID Tokens can be obtained using OAuth2 clients, and can be used to access
  # your API on behalf of a particular user.
  google_id_token:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "https://accounts.google.com"
    x-google-jwks_uri: "https://www.googleapis.com/oauth2/v3/certs"
    x-google-audiences: "{{$googleAudiences}}"
    scopes: {}
