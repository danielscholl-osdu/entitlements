apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.conf.appName }}"
  namespace: "{{ .Release.Namespace }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.conf.appName }}"
  template:
    metadata:
      labels:
        app: "{{ .Values.conf.appName }}"
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      containers:
      - image: "{{ .Values.data.image }}"
        imagePullPolicy: "{{ .Values.data.imagePullPolicy }}"
        name: "{{ .Values.conf.appName }}"
        envFrom:
        - configMapRef:
            name: "{{ .Values.conf.configmap }}"
        - secretRef:
            name: "{{ .Values.conf.entitlementsPostgresSecretName }}"
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 0
      {{- if not .Values.conf.onPremEnabled }}
      - image: "gcr.io/cloudsql-docker/gce-proxy:{{ .Values.data.cloudSqlProxyVersion }}"
        imagePullPolicy: "{{ .Values.data.imagePullPolicy }}"
        name: cloud-sql-proxy
        command:
          - /cloud_sql_proxy
          - "-instances={{ .Values.data.sqlConnectionString }}=tcp:5432"
      {{- end }}
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: "{{ .Values.data.requestsCpu }}"
            memory: "{{ .Values.data.requestsMemory }}"
          limits:
            cpu: "{{ .Values.data.limitsCpu }}"
            memory: "{{ .Values.data.limitsMemory }}"
      serviceAccountName: "{{ .Values.data.serviceAccountName }}"
